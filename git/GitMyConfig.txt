Настраиваем работу git bash для Windows

Скачиваем нужный инсталяционный файл с:
https://git-scm.com/download/win

Устанавливаем.
По умолчанию у меня установилось в:
c:\Program Files\Git\

На рабочем столе меняем ярлык не на git-bash а на: 
c:\Program Files\Git\bin\bash.exe

В поле Target ярлыка вносим: "C:\Program Files\Git\bin\bash.exe" --login -i
(только после этого все выставленные настройки с прозрачностью окна начали сохраняться).

Coздаем если его нет файл с профилем:
echo '' >> ~/.bash_profile


Для того чтобы история сохранялась, необходимо в файл ~/.bash_profile внести строку:
PROMPT_COMMAND='history -a'

После всех изменений файл ~/.bash_profile должен выглядеть так:
# generated by Git for Windows
test -f ~/.profile && . ~/.profile
test -f ~/.bashrc && . ~/.bashrc
PROMPT_COMMAND='history -a'


При этом файл ~/.bash_history должен создаться сам.


В bash для того чтобы запускать редактор Notepad++ c консоли вводим команду (создаем алиасы):
echo ' alias notepad++="c:/Program\ Files\ \(x86\)/Notepad++/notepad++.exe" ' >> ~/.bashrc

Можно добавить еще alias но с новой строки так чтобы ~/.bashrc выглядел так:

alias note="c:/Program\ Files\ \(x86\)/Notepad++/notepad++.exe" 
alias notepad++="c:/Program\ Files\ \(x86\)/Notepad++/notepad++.exe"

Мне и так и так нравиться. И коротко и полно.
Добавляем sublime если хочеться.


Добавляем еще несколько алиесов в среду bash через ~/.bashrc выглядел так:

alias note="c:/Program\ Files\ \(x86\)/Notepad++/notepad++.exe" 
alias notepad++="c:/Program\ Files\ \(x86\)/Notepad++/notepad++.exe"

alias gs='git status '
alias ga='git add '
alias gb='git branch '
alias gc='git commit'
alias gd='git diff'
alias go='git checkout '
alias gk='gitk --all&'


Перегружаем bash и новые настройки должны войти в силу.

Также в файл ~/.gitconfig можно добавить несколько алиесов только для git. 
[alias]
  co = checkout
  ci = commit
  st = status
  br = branch
  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  type = cat-file -t
  dump = cat-file -p

После чего в начале строки нужно писать git и потом алиас. (Это подходит если не пользоваться bash или 
для точного понимания что запускаешь). 


Добавляем консольный редактор nano.
Ccылка с инструкцией:
https://coderwall.com/p/ee-law/use-nano-from-git-bash-on-windows-d

В bash вводим:
curl -L -O http://www.nano-editor.org/dist/v2.2/NT/nano-2.2.6.zip
Или просто идем в браузере по ссылке
http://www.nano-editor.org/dist/v2.2/NT/nano-2.2.6.zip
Или просто идем в браузере по ссылке и скачиваем архив.

Архив розпаковываем в папку ~/share/nano/ без дополнительных папок.
Создаем папку ~/bin 
В этой папке создаем файл nano без расширения.
Открываем файл и вносим второй и третьей строкой из 4х строк(одна пустая сначала и одна пустая в конце):

#!/bin/sh
exec ~/share/nano/nano.exe "$@"

Перегружаем bash и все должно работать.
Проверяем:
	nano 1.txt
	
	
	
Добавляем консольный загрузчик wget.
Ccылка с инструкцией:
https://gist.github.com/evanwill/0207876c3243bbb6863e65ec5dc3f058


Идем в браузере по ссылке
https://eternallybored.org/misc/wget/
Cкачиваем архив последней версии для нужной розрядности Windows.

Архив розпаковываем в папку ~/share/wget/ без дополнительных папок.
Создаем папку ~/bin 
В этой папке создаем файл wget без расширения.
Открываем файл и вносим второй и третьей строкой из 4х строк(одна пустая сначала и одна пустая в конце):

#!/bin/sh
exec ~/share/wget/wget.exe "$@"

Перегружаем bash и все должно работать.


Добавляем Meld.
В файл ~/.gitconfig добавляем текс:

# use meld for diff. Add the following to your .gitconfig file.
[diff]
    tool = meld
[difftool]
    prompt = false
[difftool "meld"]
    cmd = C:/Program\\ Files\\ \\(x86\\)/Meld/Meld.exe \"$LOCAL\" \"$REMOTE\"
	
Запускаем с помощью команды 
	git difftool
Если указано несколько вариантов difftool в настройках запускаем:
	git difftool -t meld
